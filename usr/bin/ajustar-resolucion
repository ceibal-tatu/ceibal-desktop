#!/usr/bin/python
# -*- coding: iso-8859-15 -*-

import pygtk
pygtk.require('2.0')
import gtk
import commands
import os

class AjustarResolucion:

  def __init__(self):

    self.output = commands.getoutput('xrandr -q | grep \ connected | cut -d " " -f 1')
    self.default = commands.getoutput('xrandr -q | grep + | tail -1 | tr -s " " | cut -d " " -f 2')
    self.mode = "Ajustar a pantalla"
    
    if os.path.isfile(os.path.join(os.environ['HOME'],".resolucion.cfg")):
        with open(os.path.join(os.environ['HOME'],".resolucion.cfg")) as f:
            self.mode = f.read()
            self.create_window()
        self.res_callback(self.mode)
    else:
        self.create_window()

    self.statusIcon = gtk.StatusIcon()
    self.statusIcon.set_from_stock(gtk.STOCK_FULLSCREEN)
    self.statusIcon.set_visible(True)
    self.statusIcon.set_tooltip("Ajustar la resolución de la pantalla")

    self.statusIcon.connect('activate', self.window_show_cb)
    self.statusIcon.set_visible(1)

    gtk.main()

  def window_show_cb(self,widget):
    if not self.window:
      self.create_window()
    self.window.show()
  
  def window_hide_cb(self,widget):
    self.window.hide()
    self.window = False

  def create_window(self):

    maxX = self.default.split('x')[0]
    maxY = self.default.split('x')[1]

    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL) 
    self.window.set_title("Resolución")
    self.window.set_border_width(0)
    self.window.connect("destroy", self.window_hide_cb)

    box1 = gtk.VBox(False, 0)
    self.window.add(box1)
    box1.show()

    box2 = gtk.VBox(False, 10)
    box2.set_border_width(10)
    box1.pack_start(box2, True, True, 0)
    box2.show()

    self.button1 = gtk.RadioButton(None, "Ajustar a pantalla")
    box2.pack_start(self.button1, True, True, 0)
    if self.mode == "Ajustar a pantalla":
        self.button1.set_active(True)
    self.button1.show()

    self.button2 = gtk.RadioButton(self.button1, "800x600")
    box2.pack_start(self.button2, True, True, 0)
    if self.mode == "800x600":
        self.button2.set_active(True)
    if int(maxX) > 800:
        self.button2.set_sensitive(False)
    self.button2.show()

    self.button3 = gtk.RadioButton(self.button1, "1024x768")
    box2.pack_start(self.button3, True, True, 0)
    if int(maxX) > 1024:
        self.button3.set_sensitive(False)
    if self.mode == "1024x768":
        self.button3.set_active(True)
    self.button3.show()

    self.button4 = gtk.RadioButton(self.button1, "1200x900")
    box2.pack_start(self.button4, True, True, 0)
    if int(maxX) > 1200:
        self.button3.set_sensitive(False)
    if self.mode == "1200x900":
        self.button4.set_active(True)
    self.button4.show()

    separator = gtk.HSeparator()
    box1.pack_start(separator, False, True, 0)
    separator.show()

    box2 = gtk.VBox(False, 10)
    box2.set_border_width(10)
    box1.pack_start(box2, False, True, 0)
    box2.show()

    button = gtk.Button("Aplicar")
    button.connect("clicked", self.aplicar_cb)
    box2.pack_start(button, True, True, 0)
    button.set_flags(gtk.CAN_DEFAULT)
    button.grab_default()
    button.show()

    self.window.set_resizable(0)

  def aplicar_cb(self, widget, data=None):
    for button in self.button1.get_group():
        if button.get_active():
            self.res_callback(button.get_label())

  def res_callback(self, option):
    if option == "Ajustar a pantalla":
        commands.getoutput('xrandr --output %s --fb %s --panning %s'%(self.output,self.default,self.default))
    elif option == "800x600":
        commands.getoutput('xrandr --output %s --fb 800x600 --panning 800x600'%self.output)
    elif option == "1024x768":
        commands.getoutput('xrandr --output %s --fb 1024x768 --panning 1024x768'%self.output)
    elif option == "1200x900":
        commands.getoutput('xrandr --output %s --fb 1200x900 --panning 1200x900'%self.output)
    f = open(os.path.join(os.environ['HOME'],".resolucion.cfg"),"w")
    f.write(option)
    f.close()
    self.mode = option
    
  def quit_cb(self, widget, data = None):
    gtk.main_quit()

if __name__ == "__main__":
  res = AjustarResolucion()
